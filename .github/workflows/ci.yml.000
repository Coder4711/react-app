name: CI
on:
  pull_request:
    branches: [develop. main]
  push:
    branches: [develop, main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          #key: mykey
          #key: node-¢{{ hashFiles('**/packages-lock.json')}}
          key: ${{ runner.os }}-node-¢{{ hashFiles('**/packages-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          #node-version: "12.x"
          node-version: "14.x"
      #- run: npm ci
      #- run: npm run format:check
      #- run: npm test -- --coverage
      #  env:
      #    CI: true
      #- name: Upload test Coverage
      #  uses: actions/upload-artifact@v1
      #  with:
      #    name: code-coverage
      #    path: coverage

      - name: Build Project
        if: github.event_name == 'push'
        run: npm run build
      #- run: npm install -g surge

      - name: Upload Build Folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

      - name: Display
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.ref  }}
          
      - name: Zip Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        #if: ${{ github.ref == 'refs/heads/main' }} # refs/heads/main
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage

      #- name: Create Release
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #  run: npx semantic-release
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: Deploy to Stating
      #  if: github.event_name == 'push'
      #  run: npx surge --project ./build --domain screeching-hate.surge.sh
      #  env:
      #    SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      #    SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Version erstellen (Patch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "$(git log --format='%ae' HEAD^!)"
          git config --local user.name "$(git log --format='%an' HEAD^!)"
          npm version patch
          echo "::set-output name=version::$(npm view react-app version)"
        id: version

      #- name: Git Info setzen
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #  run: |
      #    git config --local user.email "$(git log --format='%ae' HEAD^!)"
      #    git config --local user.name "$(git log --format='%an' HEAD^!)"

      - name: Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: tag-${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      #- name: Debug - ls
      #  run: |
      #    echo ${{ steps.create_release.outputs.upload_url }}
      #    ls -al

      #- name: Upload artifact
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: build.zip
      #    asset_name: build.zip
      #    asset_content_type: application/zip
